# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\UP5\ICv2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
import matplotlib.pyplot as plt

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(920, 480)
        '''
        self.difer = QtWidgets.QPushButton(Dialog)
        self.difer.setGeometry(QtCore.QRect(470, 200, 200, 31))
        self.difer.setStyleSheet("font: 11pt \"Nirmala UI\";\n""")
        '''
        self.raschet = QtWidgets.QPushButton(Dialog)
        self.raschet.setGeometry(QtCore.QRect(320, 280, 131, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.raschet.sizePolicy().hasHeightForWidth())
        self.raschet.setSizePolicy(sizePolicy)
        self.raschet.setStyleSheet("font: 14pt \"Nirmala UI\";\n"
"")
        self.raschet.setObjectName("raschet")
        self.verticalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(230, 70, 221, 204))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.summa = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.summa.setInputMask("")
        self.summa.setObjectName("summa")
        self.verticalLayout.addWidget(self.summa)
        self.summa.setText("0")
        self.intInputValidation = QtGui.QIntValidator()
        self.summa.setValidator(self.intInputValidation)

        self.horizontalSlider_summa = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.horizontalSlider_summa.setMaximum(200)
        self.horizontalSlider_summa.setTickInterval(1)
       # self.horizontalSlider_summa.setSingleStep(1000000)
      #  self.horizontalSlider_summa.setPageStep(1000000)
        self.horizontalSlider_summa.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_summa.setObjectName("horizontalSlider_summa")
        self.verticalLayout.addWidget(self.horizontalSlider_summa)



        self.procentStav = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.procentStav.setObjectName("procentStav")
        self.verticalLayout.addWidget(self.procentStav)
        self.procentStav.setText("0")


        self.horizontalSlider_stav = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.horizontalSlider_stav.setMaximum(30)
        self.horizontalSlider_stav.setSingleStep(1)
        self.horizontalSlider_stav.setPageStep(1)
        self.horizontalSlider_stav.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_stav.setObjectName("horizontalSlider_stav")
        self.verticalLayout.addWidget(self.horizontalSlider_stav)

        self.Srok = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.Srok.setObjectName("Srok")
        self.verticalLayout.addWidget(self.Srok)
        self.Srok.setText("0")

        self.horizontalSlider_srok = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.horizontalSlider_srok.setMaximum(30)
        self.horizontalSlider_srok.setSingleStep(1)
        self.horizontalSlider_srok.setPageStep(0)
        self.horizontalSlider_srok.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_srok.setObjectName("horizontalSlider_srok")
        self.verticalLayout.addWidget(self.horizontalSlider_srok)

        self.FirstPay = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.FirstPay.setObjectName("FirstPay")
        self.verticalLayout.addWidget(self.FirstPay)
        self.FirstPay.setText("0")
        self.FirstPay.setValidator(self.intInputValidation)

        self.horizontalSlider_firstpay = QtWidgets.QSlider(self.verticalLayoutWidget)
        self.horizontalSlider_firstpay.setMaximum(200)
        self.horizontalSlider_firstpay.setSingleStep(1)
        self.horizontalSlider_firstpay.setPageStep(1)
        #self.horizontalSlider_firstpay.setTickInterval(1000)

        self.horizontalSlider_firstpay.setProperty("value", 0)
        self.horizontalSlider_firstpay.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_firstpay.setObjectName("horizontalSlider_firstpay")
        self.verticalLayout.addWidget(self.horizontalSlider_firstpay)

        # изменение lineEdit в реальном времени

        self.horizontalSlider_summa.valueChanged.connect(lambda: self.summaslider())
        self.horizontalSlider_stav.valueChanged.connect(lambda: self.stavslider())
        self.horizontalSlider_srok.valueChanged.connect(lambda: self.srokslider())
        self.horizontalSlider_firstpay.valueChanged.connect(lambda: self.Firstpayslider())
        #


        self.overpay = QtWidgets.QLineEdit(Dialog)
        self.overpay.setGeometry(QtCore.QRect(670, 107, 221, 22))
        self.overpay.setObjectName("overpay")
        self.label_overpay = QtWidgets.QLabel(Dialog)
        self.label_overpay.setGeometry(QtCore.QRect(460, 107, 181, 20))
        self.label_overpay.setStyleSheet("font: 700 9pt \"Nirmala UI\";")
        self.label_overpay.setObjectName("label_overpay")
        self.allpay = QtWidgets.QLineEdit(Dialog)
        self.allpay.setGeometry(QtCore.QRect(670, 147, 221, 22))
        self.allpay.setText("")
        self.allpay.setObjectName("allpay")
        self.label_AllPay = QtWidgets.QLabel(Dialog)
        self.label_AllPay.setGeometry(QtCore.QRect(460, 147, 181, 20))
        self.label_AllPay.setStyleSheet("font: 700 9pt \"Nirmala UI\";")
        self.label_AllPay.setObjectName("label_AllPay")
        self.layoutWidget = QtWidgets.QWidget(Dialog)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 60, 211, 201))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_Summa = QtWidgets.QLabel(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_Summa.sizePolicy().hasHeightForWidth())
        self.label_Summa.setSizePolicy(sizePolicy)
        self.label_Summa.setStyleSheet("font: 700 9pt \"Nirmala UI\";")
        self.label_Summa.setObjectName("label_Summa")
        self.verticalLayout_2.addWidget(self.label_Summa)
        self.label_prcent = QtWidgets.QLabel(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_prcent.sizePolicy().hasHeightForWidth())
        self.label_prcent.setSizePolicy(sizePolicy)
        self.label_prcent.setStyleSheet("font: 700 9pt \"Nirmala UI\";")
        self.label_prcent.setObjectName("label_prcent")
        self.verticalLayout_2.addWidget(self.label_prcent)
        self.label_srok = QtWidgets.QLabel(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_srok.sizePolicy().hasHeightForWidth())
        self.label_srok.setSizePolicy(sizePolicy)
        self.label_srok.setStyleSheet("font: 700 9pt \"Nirmala UI\";")
        self.label_srok.setObjectName("label_srok")
        self.verticalLayout_2.addWidget(self.label_srok)
        self.label_Firstpay = QtWidgets.QLabel(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_Firstpay.sizePolicy().hasHeightForWidth())

        self.label_Firstpay.setSizePolicy(sizePolicy)
        self.label_Firstpay.setStyleSheet("font: 700 9pt \"Nirmala UI\";")
        self.label_Firstpay.setObjectName("label_Firstpay")
        self.verticalLayout_2.addWidget(self.label_Firstpay)


        self.EveryPay = QtWidgets.QLineEdit(Dialog)
        self.EveryPay.setGeometry(QtCore.QRect(670, 70, 221, 22))
        self.EveryPay.setText("")
        self.EveryPay.setObjectName("EveryPay")

        # ReadOnly для выходных данных
        self.EveryPay.setReadOnly(True)
        self.allpay.setReadOnly(True)
        self.overpay.setReadOnly(True)

        self.label_everyPay = QtWidgets.QLabel(Dialog)
        self.label_everyPay.setGeometry(QtCore.QRect(460, 70, 181, 20))
        self.label_everyPay.setStyleSheet("font: 700 9pt \"Nirmala UI\";")
        self.label_everyPay.setObjectName("label_everyPay")
        self.grafik = QtWidgets.QPushButton(Dialog)
        self.grafik.setGeometry(QtCore.QRect(180, 280, 131, 51))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.grafik.sizePolicy().hasHeightForWidth())
        self.grafik.setSizePolicy(sizePolicy)
        self.grafik.setStyleSheet("font: 14pt \"Nirmala UI\";\n"
"")
        self.grafik.setObjectName("grafik")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)




    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.raschet.setText(_translate("Dialog", "Рассчитать "))
        self.label_overpay.setText(_translate("Dialog", "Переплата"))
        self.label_AllPay.setText(_translate("Dialog", "Всего заплачено банку"))
        self.label_Summa.setText(_translate("Dialog", "Сумму ипотеки"))
        self.label_prcent.setText(_translate("Dialog", "Процентую ставку"))
        self.label_srok.setText(_translate("Dialog", "Срок ипотеки"))
        self.label_Firstpay.setText(_translate("Dialog", "Первоначальный взнос"))
        self.label_everyPay.setText(_translate("Dialog", "Ежемесячный платёж"))
        self.grafik.setText(_translate("Dialog", "Диаграмма"))


        self.raschet.clicked.connect(self.result)
        self.grafik.clicked.connect(self.diagram)
        #self.difer.clicked.connect(self.diferrsch)
        self.summa.textEdited.connect(self.summaLineEdit)
        self.FirstPay.textEdited.connect(self.FirstPayLineEdit)
    def result (self):
        #global procentPart, generalPart
        summa = (self.summa.text())
        summa = int(summa.replace(' ', ''))

        FirstPay = (self.FirstPay.text())
        FirstPay = int(FirstPay.replace(' ', ''))


        if summa != 0 and float(self.procentStav.text()) != 0 and int(self.Srok.text()) != 0 :
            if summa > FirstPay:
                #ввод данных


                procent = float(self.procentStav.text())
                srok = int(self.Srok.text()) * 12

                    #
                Ostatok = summa - FirstPay
                everyMS = procent / 12 / 100
                generalStav = (1 + everyMS) ** srok
                everyPay = Ostatok * everyMS * generalStav / (generalStav - 1)
                global procentPart, generalPart

                generalPart = summa
                overPay = everyPay * srok - Ostatok
                total = Ostatok + overPay
                procentPart = overPay



                #вывод данных
                self.EveryPay.setText(str(round(everyPay))+" Руб.")
                self.overpay.setText(str(round(overPay))+ " Руб.")
                self.allpay.setText(str(round(total))+ " Руб.")
                    #
            else:

                QMessageBox.critical(QWidget(), 'Ошибка!', "Первоначальный взнос больше суммы кредита!!!")
        else:
            #уведомление обо ошибке
            QMessageBox.critical(QWidget(), 'Ошибка!', "Значение(я) равно нулю!!!")


    # функции для отображения значения слайдеров в реальном времени
    def summaslider(self):

        s = str(self.horizontalSlider_summa.value()*100000)
        i = len(s)
        print(self.horizontalSlider_summa.value())
        z = ''
        while i - 3 > 0:
            z = s[i - 3:i] + ' ' + z
            i -= 3
        z = s[0:i] + ' ' + z
        z=z.strip(" ")
        self.summa.setText(str(z))


    def summaLineEdit(self):

        s = str(self.summa.text())
        s=s.replace(' ', '')
        i = len(s)
        print(self.summa.text())
        z = ''
        while i - 3 > 0:
            z = s[i - 3:i] + ' ' + z
            i -= 3
        z = s[0:i] + ' ' + z
        z=z.strip(" ")
        self.summa.setText(str(z))

    def stavslider(self):
        self.procentStav.setText(str(self.horizontalSlider_stav.value()))

    def srokslider(self):
        self.Srok.setText(str(self.horizontalSlider_srok.value()))

    def Firstpayslider(self):
        s = str(self.horizontalSlider_firstpay.value()*100000)
        i = len(s)

        z = ''
        while i - 3 > 0:
            z = s[i - 3:i] + ' ' + z
            i -= 3
        z = s[0:i] + ' ' + z
        z=z.strip(" ")
        self.FirstPay.setText(str(z))

    def FirstPayLineEdit(self):

        s = str(self.FirstPay.text())
        s = s.replace(' ', '')
        i = len(s)
        z = ''
        while i - 3 > 0:
            z = s[i - 3:i] + ' ' + z
            i -= 3
        z = s[0:i] + ' ' + z
        z=z.strip(" ")
        self.FirstPay.setText(str(z))

    #






    def diagram(self):
        if len(str(self.allpay.text())) != 0 and len(str(self.EveryPay.text())) != 0 and len(str(self.overpay.text())) != 0 :

            vals = [procentPart, generalPart]
            labels = ["Проценты", "Основная часть кредита"]
            fig, ax = plt.subplots()
            fig.set_size_inches(100, 100)
            ax.pie(vals, labels=labels,autopct='%1.2f%%')
            ax.axis("equal")
            plt.show()

        else:
            QMessageBox.critical(QWidget(), 'Ошибка!', "Введите данные!!!")




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
